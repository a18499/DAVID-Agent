#############
# Definitions
#############

#Some macro define some behavior of Container
- macro: open_write
  condition: (evt.type=open or evt.type=openat) and evt.is_open_write=true and fd.typechar='f'
- macro: open_read
  condition: (evt.type=open or evt.type=openat) and evt.is_open_read=true and fd.typechar='f'
- macro: rename
  condition: evt.type = rename
- macro: mkdir
  condition: evt.type = mkdir
- macro: remove
  condition: evt.type in (rmdir, unlink, unlinkat)

- macro: modify
  condition: rename or remove

- macro: spawned_process
  condition: evt.type = execve and evt.dir=<

# File categories
- macro: terminal_file_fd
  condition: fd.name=/dev/ptmx or fd.name startswith /dev/pts

- macro: bin_dir
  condition: fd.directory in (/bin, /sbin, /usr/bin, /usr/sbin)

- macro: bin_dir_mkdir
  condition: evt.arg[0] startswith /bin/ or evt.arg[0] startswith /sbin/ or evt.arg[0] startswith /usr/bin/ or evt.arg[0] startswith /usr/sbin/
- macro: bin_dir_rename
  condition: evt.arg[1] startswith /bin/ or evt.arg[1] startswith /sbin/ or evt.arg[1] startswith /usr/bin/ or evt.arg[1] startswith /usr/sbin/

- macro: etc_dir
  condition: fd.name startswith /etc

- macro: ubuntu_so_dirs
  condition: fd.name startswith /lib/x86_64-linux-gnu or fd.name startswith /usr/lib/x86_64-linux-gnu or fd.name startswith /usr/lib/sudo
- macro: centos_so_dirs
  condition: fd.name startswith /lib64 or fd.name startswith /usr/lib64 or fd.name startswith /usr/libexec
- macro: linux_so_dirs
  condition: ubuntu_so_dirs or centos_so_dirs or fd.name=/etc/ld.so.cache

- list: shell_binaries
  items: [bash, csh, ksh, sh, tcsh, zsh, dash]

- macro: shell_procs
  condition: proc.name in (shell_binaries)

- list: coreutils_binaries
  items: [
    truncate, sha1sum, numfmt, fmt, fold, uniq, cut, who,
    groups, csplit, sort, expand, printf, printenv, unlink, tee, chcon, stat,
    basename, split, nice, "yes", whoami, sha224sum, hostid, users, stdbuf,
    base64, unexpand, cksum, od, paste, nproc, pathchk, sha256sum, wc, test,
    comm, arch, du, factor, sha512sum, md5sum, tr, runcon, env, dirname,
    tsort, join, shuf, install, logname, pinky, nohup, expr, pr, tty, timeout,
    tail, "[", seq, sha384sum, nl, head, id, mkfifo, sum, dircolors, ptx, shred,
    tac, link, chroot, vdir, chown, touch, ls, dd, uname, "true", pwd, date,
    chgrp, chmod, mktemp, cat, mknod, sync, ln, "false", rm, mv, cp, echo,
    readlink, sleep, stty, mkdir, df, dir, rmdir, touch
    ]

# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr "\\n" ","
- list: login_binaries
  items: [login, systemd, systemd-logind, su, nologin, faillog, lastlog, newgrp, sg]

# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr "\\n" ","
- list: passwd_binaries
  items: [
    shadowconfig, grpck, pwunconv, grpconv, pwck,
    groupmod, vipw, pwconv, useradd, newusers, cppw, chpasswd, usermod,
    groupadd, groupdel, grpunconv, chgpasswd, userdel, chage, chsh,
    gpasswd, chfn, expiry, passwd, vigr, cpgr
    ]

# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr "\\n" ","
- list: shadowutils_binaries
  items: [
    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,
    groupadd, groupdel, addgroup, delgroup, groupmems, groupmod, grpck, grpconv, grpunconv,
    newusers, pwck, pwconv, pwunconv, useradd, userdel, usermod, vigr, vipw, unix_chkpwd
    ]

- list: sysdigcloud_binaries
  items: [setup-backend, dragent, sdchecks]

- list: docker_binaries
  items: [docker, dockerd, exe]

- list: k8s_binaries
  items: [hyperkube, skydns, kube2sky]

- list: http_server_binaries
  items: [nginx, httpd, httpd-foregroun, lighttpd]

- list: db_server_binaries
  items: [mysqld]

- macro: server_procs
  condition: proc.name in (http_server_binaries, db_server_binaries, docker_binaries, sshd)

# The truncated dpkg-preconfigu is intentional, process names are
# truncated at the sysdig level.
- list: package_mgmt_binaries
  items: [dpkg, dpkg-preconfigu, dnf, rpm, rpmkey, yum, frontend]

- macro: package_mgmt_procs
  condition: proc.name in (package_mgmt_binaries)

- list: ssl_mgmt_binaries
  items: [ca-certificates]

- list: dhcp_binaries
  items: [dhclient, dhclient-script]

# A canonical set of processes that run other programs with different
# privileges or as a different user.
- list: userexec_binaries
  items: [sudo, su]

- list: user_mgmt_binaries
  items: [login_binaries, passwd_binaries, shadowutils_binaries]

- macro: system_procs
  condition: proc.name in (coreutils_binaries, user_mgmt_binaries)

- list: mail_binaries
  items: [sendmail, sendmail-msp, postfix, procmail, exim4]

- macro: sensitive_files
  condition: fd.name startswith /etc and (fd.name in (/etc/shadow, /etc/sudoers, /etc/pam.conf) or fd.directory in (/etc/sudoers.d, /etc/pam.d))

# Indicates that the process is new. Currently detected using time
# since process was started, using a threshold of 5 seconds.
- macro: proc_is_new
  condition: proc.duration <= 5000000000

# Network
- macro: inbound
  condition: ((evt.type=listen and evt.dir=>) or (evt.type=accept and evt.dir=<))

# Currently sendto is an ignored syscall, otherwise this could also check for (evt.type=sendto and evt.dir=>)
- macro: outbound
  condition: evt.type=connect and evt.dir=< and (fd.typechar=4 or fd.typechar=6)

- macro: ssh_port
  condition: fd.lport=22

# Ssh
- macro: ssh_error_message
  condition: (evt.arg.data contains "Invalid user" or evt.arg.data contains "preauth" or evt.arg.data contains "Failed password")

# System
- macro: modules
  condition: evt.type in (delete_module, init_module)

# Use this to test whether the event occurred within a container.

# When displaying container information in the output field, use
# %container.info, without any leading term (file=%fd.name
# %container.info user=%user.name, and not file=%fd.name
# container=%container.info user=%user.name). The output will change
# based on the context and whether or not -pk/-pm/-pc was specified on
# the command line.
- macro: container
  condition: container.id != host
- macro: interactive
  condition: ((proc.aname=sshd and proc.name != sshd) or proc.name=systemd-logind or proc.name=login)
- macro: syslog
  condition: fd.name in (/dev/log, /run/systemd/journal/syslog)
- list: cron_binaries
  items: [cron, crond]

# System users that should never log into a system. Consider adding your own
# service users (e.g. 'apache' or 'mysqld') here.
- macro: system_users
  condition: user.name in (bin, daemon, games, lp, mail, nobody, sshd, sync, uucp, www-data)



#clone
- rule: clone API 
  desc: Something create a new process
  condition: evt.type=clone and container
  output: "Clone API Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true

#execve
- rule: execve API
  desc: Somthing executes a new program
  condition: evt.type=execve and container
  output: "Execve API Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true

#chdir
- rule: chdir API
  desc: Change the current process working directory
  condition: evt.type=chdir and container
  output: "Chdir API Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true



#connect
- rule: Connect
  desc: Initiates a connection on a socket
  condition: evt.type=connect and container
  output: "Connect API Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true

#accept
- rule: Accept
  desc: Accepts a connection on a socket
  condition: evt.type=accept and container
  output: "Accept API Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true

#open_write  
- rule: Write  
  desc: Container has write behavior 
  condition: open_write and container 
  output: "Container has write behavior Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info Syslog=%syslog.facility.str" 
  priority: INFO
  enabled: true

#open_read  
- rule: Read
  desc: Container has Read behavior 
  condition: open_read and container 
  output: "Container has Read behavior Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info" 
  priority: INFO
  enabled: true

#rename
- rule: Rename
  desc: Container has rename behavior
  condition: rename and container
  output: "Container has rename behavior Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true

#mkdir
- rule: Mkdir
  desc: Container has mkdir behavior
  condition: mkdir and container
  output: "Container has mkdir behavior Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true

#spawned_process
- rule: Spawned_process
  desc: Container has spawned_process behavior
  condition: spawned_process and container
  output: "Container has spawned_process behavior Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true


#brk
- rule: Brk
  desc: ask kernel for memory
  condition: (evt.type=brk ) and container
  output: "brk API Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true
#mmap
- rule: mmap
  desc: allocate memory
  condition: (evt.type=mmap ) and container
  output: "mmap API Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true
#munmap
- rule: munmap
  desc: free memory
  condition: (evt.type=munmap ) and container
  output: "munmap API Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true

#slect
- rule: slect
  desc: wait for something
  condition: evt.type=select and container
  output: "slect API Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true

#poll
- rule: poll
  desc: wait for something
  condition: evt.type=poll and container
  output: "poll API Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true

#kill
- rule: kill API
  desc: sends signal
  condition: evt.type=kill and container
  output: "kill API Container ID=%container.id Type=%evt.type Content=%evt.buffer Info=%evt.info"
  priority: INFO
  enabled: true 

#Network-inbound
- rule: network_inbound
  desc: Container has Network-inbound flow
  condition: inbound and container
  output: "Container has Network-inbound flow Container ID=%container.id Port=%fd.sport Client=%fd.cport evt.type=%evt.type Content=%evt.buffer BufferLen=%evt.buflen"
  priority: INFO
  enabled: true

#Network-outbound
- rule: network_outbound
  desc: Container has Network-outbound flow
  condition: evt.type=sendto and evt.dir=> and container 
  output: "Container has Network-outbound flow Container ID=%container.id Port=%fd.sport Client=%fd.cport evt.type=%evt.type Content=%evt.buffer BufferLen=%evt.buflen"
  priority: INFO
  enabled: true

#Network-HTTP
- rule: network_http
  desc: Container has Network-outbound flow
  condition: (evt.buffer contains GET or evt.buffer contains POST) and container
  output: "Container has Network-HTTP flow Container ID=%container.id Port=%fd.sport Client=%fd.cport evt.type=%evt.type Content=%evt.buffer BufferLen=%evt.buflen"
  priority: INFO
  enabled: true

#Network-CPP
- rule: network_cpp
  desc: Container has Network-cpp flow
  condition: (fd.port=8080 or fd.port=8443)and evt.type=sendto and container
  output: "Container has Network-cpp flow Container ID=%container.id Port=%fd.sport Client=%fd.cport evt.type=%evt.type Content=%evt.buffer BufferLen=%evt.buflen fdNet=%fd.net evt.res=%evt.res evt.args=%evt.args "
  priority: INFO
  enabled: true

#POSTGRE-SQL
- rule: postgresql
  desc: Container has postgresql flow
  condition: fd.port=5432 and ( evt.type=sendto or evt.type=recvfrom)
  output: "Container has postgresql flow Container ID=%container.id Port=%fd.sport Client=%fd.cport evt.type=%evt.type Content=%evt.buffer BufferLen=%evt.buflen fdNet=%fd.net evt.res=%evt.res evt.args=%evt.args sysLog=%syslog.facility.str EXE=%proc.exeline Proc.args=%proc.args"
  priority: INFO
  enabled: true

# Elasticsearch ports
- macro: elasticsearch_cluster_port
  condition: fd.sport=9300
- macro: elasticsearch_api_port
  condition: fd.sport=9200
- macro: elasticsearch_port
  condition: elasticsearch_cluster_port or elasticsearch_api_port

#Elasticsearch
- rule: elasticsearch
  desc: Container has Elasticsearch flow
  condition: (elasticsearch_cluster_port or elasticsearch_cluster_port) and ( evt.type=sendto or evt.type=recvfrom)
  output: "Container has Elasticsearch flow Container ID=%container.id Port=%fd.sport Client=%fd.cport evt.type=%evt.type Content=%evt.buffer BufferLen=%evt.buflen fdNet=%fd.net evt.res=%evt.res evt.args=%evt.args sysLog=%syslog.facility.str EXE=%proc.exeline Proc.args=%proc.args"
  priority: INFO
  enabled: true


#My-SQL
- rule: mysql
  desc: Container has mysql flow
  condition: fd.port=3306 and ( evt.type=sendto or evt.type=recvfrom)
  output: "Container has mysql flow Container ID=%container.id Port=%fd.sport Client=%fd.cport evt.type=%evt.type Content=%evt.buffer BufferLen=%evt.buflen fdNet=%fd.net evt.res=%evt.res evt.args=%evt.args sysLog=%syslog.facility.str EXE=%proc.exeline Proc.args=%proc.args"
  priority: INFO
  enabled: true



